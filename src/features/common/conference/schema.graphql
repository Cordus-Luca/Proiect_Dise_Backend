# Get conference action
type Status {
  id: Int!
  name: String!
}

type Location {
  id: Int!
  name: String
  address: String
  city: City!
  county: County!
  country: Country!
  latitude: Float
  longitude: Float
}

type Speaker {
  id: Int!
  name: String
  rating: Float
  nationality: String
  phoneNumber: String
  isMainSpeaker: Boolean
}

type Conference {
  id: Int!
  name: String!
  startDate: DateTime!
  endDate: DateTime!
  type: Type
  category: Category
  organizerEmail: String!
  speakers: [Speaker!]!
  location: Location!
  status(userEmail: String!): Status
}

input ConferenceFilterInput {
  startDate: DateTime
  endDate: DateTime
}

extend type Query {
  conferenceList(filters: ConferenceFilterInput, userEmail:String!): [Conference]
  conference(id: Int!): Conference!
}

# Save conference action
input ConferenceInput {
  id: Int
  name: String!
  startDate: DateTime!
  endDate: DateTime!
  organizerEmail: String!
  type: TypeInput!
  category: CategoryInput!
  location: LocationInput!
  speakers: [SpeakerInput!]!
  deletedSpeakers: [Int!]
}

input LocationInput {
  id: Int
  name: String
  address: String
  latitude: Float
  longitude: Float
  cityId: Int!
  countyId: Int!
  countryId: Int!
}

input SpeakerInput {
  id: Int
  name: String
  isMainSpeaker: Boolean
  nationality: String
  rating: Float
  phoneNumber: String
}

extend type Mutation {
    saveConference(input: ConferenceInput!): Conference!
    deleteConference(id: Int!): String
}